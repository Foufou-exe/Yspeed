var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to Yspeed Documentation","text":"<p>Yspeed is a Python tool for testing internet speed using the <code>https://www.speedtest.net/</code> service. It provides information on download speed, upload speed, ping, operator, IP address, location, and best server for the connection.</p>"},{"location":"index.html#getting-started","title":"Getting Started","text":"<p>To get started with Yspeed, you can clone the GitHub repository and install the required dependencies using pip:</p> <pre><code>git clone https://github.com/your_username/yspeed.git\ncd yspeed\npip install -r requirements.txt\n</code></pre> <p>or</p> <pre><code>pip install yspeed\n</code></pre>"},{"location":"index.html#usage","title":"Usage","text":"<p>To use Yspeed, you can run the <code>yspeed.py</code> script using the following command:</p> <pre><code>python yspeed.py\n</code></pre> <p>This will start the speed test and display the results in the console.</p>"},{"location":"index.html#documentation","title":"Documentation","text":"<p>This documentation provides information on how to use Yspeed, including installation, usage, and customization. You can navigate through the documentation using the sidebar on the left.</p>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>If you would like to contribute to Yspeed, you can clone the GitHub repository, create a new branch for your feature or bug fix, make the necessary changes, and submit a pull request.</p>"},{"location":"index.html#license","title":"License","text":"<p>Yspeed is distributed under the MIT license. See the <code>LICENSE</code> file for more information.</p> <p>We hope you enjoy using Yspeed to test your internet speed!</p>"},{"location":"contributor.html","title":"Contributor","text":""},{"location":"contributor.html#message-from-the-creator","title":"Message from the creator","text":"<p>Dear project contributors,</p> <p>We would like to express our sincere gratitude and deep appreciation for your dedication and passion in contributing to the success of our project. Each and every one of you played a vital role in achieving our goals, and without your commitment we would not have been able to achieve the remarkable results we are proud of today.</p> <p>Your expertise, skills and creativity have been essential in improving the quality of our work and overcoming the challenges we have faced. Thanks to your team spirit, adaptability and resilience, we have been able to develop innovative and sustainable solutions that have a real and positive impact.</p> <p>As contributors, you are the heart and soul of our project. Your determination to share your knowledge and support other team members is a testament to your commitment to our shared vision. You embody the core values of our project and inspire future contributors to join our ranks.</p> <p>We are aware that behind every success are hours of hard work, sacrifice and personal effort. We greatly appreciate your time, energy and dedication in making this project what it is today.</p> <p>We thank you once again for your invaluable contribution and encourage you to continue to actively participate in our project, share your ideas and face the challenges ahead together. Together we will continue to grow, innovate and push the boundaries of what is possible.</p> <p>With our sincere thanks and deep respect</p> <p>By mister Foufou-exe</p>"},{"location":"contributor.html#contributeurs-principaux","title":"Contributeurs principaux","text":"<p>Ahmosys</p>"},{"location":"explain.html","title":"Code","text":""},{"location":"explain.html#classe-yspeed","title":"Classe Yspeed","text":"<p>The constructor of the Yspeed class initializes the variables needed to perform a speed test, including the web browser, progress bar and browser options.</p>"},{"location":"explain.html#best_serverself-dict","title":"best_server(self) -&gt; dict","text":"<pre><code>driver = self._extracted_from_get_speedtest()\nwait = WebDriverWait(driver, 5)\nwait.until(EC.visibility_of_element_located((By.CLASS_NAME, \"hostUrl\")))\nwait.until(EC.visibility_of_element_located((By.CLASS_NAME, \"name\")))\nprovider = driver.find_element(By.CLASS_NAME, \"hostUrl\").text\nserver = driver.find_element(By.CLASS_NAME, \"name\").text\ndriver.quit()\nreturn {\"provider\": provider, \"Serveur\": server}\n</code></pre> <p>This method uses the selenium library to interact with the web browser and get information about the best server for the connection. It returns a dictionary containing the server name.</p>"},{"location":"explain.html#display_resultsself-speedtest-dict-none","title":"display_results(self, speedtest: dict) -&gt; None","text":"<pre><code>bold_yellow = \"bold yellow\"\nconsole = Console()\nconsole.print(\"\\nSpeedtest\", style=bold_yellow, justify=\"center\")\nconsole.print(\n\"Download: [bold green]{download}[/bold green]\".format(**speedtest),\nstyle=\"blue\",\njustify=\"center\",\n)\nconsole.print(\n\"Upload: [bold green]{upload}[/bold green]\".format(**speedtest),\nstyle=\"blue\",\njustify=\"center\",\n)\nconsole.print(\n\"Ping: [bold green]{ping}[/bold green]\".format(**speedtest),\nstyle=\"blue\",\njustify=\"center\",\n)\nconsole.print(\"Thanks for Speedtest\", style=\"bold red\", justify=\"center\")\n</code></pre> <p>This method displays the results of the speed test in the console. It uses the rich library to display the results in a readable format.</p>"},{"location":"explain.html#get_ip_infoself-dict","title":"get_ip_info(self) -&gt; dict","text":"<pre><code>response = requests.get(\"https://ipinfo.io/json\", timeout=5)\ndata = response.json()\nip_public = data[\"ip\"]\ncity = data[\"city\"]\nregion = data[\"region\"]\ncountry = data[\"country\"]\noperator = data[\"org\"]\nreturn {\n\"ip\": ip_public,\n\"city\": city,\n\"region\": region,\n\"country\": country,\n\"operator\": operator,\n}\n</code></pre> <p>This method uses the requests library to make an HTTP request to an online service and retrieve information about the user's IP address, including city, region, country and operator. It returns a dictionary containing this information.</p>"},{"location":"explain.html#get_speedtestself-dict","title":"get_speedtest(self) -&gt; dict","text":"<pre><code>driver = self._extracted_from_get_speedtest()\ngo_button = driver.find_element(By.CSS_SELECTOR, \".start-button a\")\ngo_button.click()\ntime.sleep(45)\nwait = WebDriverWait(driver, 10)\nwait.until(\nEC.visibility_of_element_located(\n(\nBy.CLASS_NAME,\n\"result-data-large.number.result-data-value.download-speed\",\n)\n)\n)\nwait.until(\nEC.visibility_of_element_located(\n(\nBy.CLASS_NAME,\n\"result-data-large.number.result-data-value.upload-speed\",\n)\n)\n)\nwait.until(\nEC.visibility_of_element_located(\n(By.CLASS_NAME, \"result-data-value.ping-speed\")\n)\n)\ndownload_speed = driver.find_element(\nBy.CLASS_NAME, \"result-data-large.number.result-data-value.download-speed\"\n).text\nupload_speed = driver.find_element(\nBy.CLASS_NAME, \"result-data-large.number.result-data-value.upload-speed\"\n).text\nping_speed = driver.find_element(\nBy.CLASS_NAME, \"result-data-value.ping-speed\"\n).text\ndriver.quit()\nreturn {\n\"download\": download_speed,\n\"upload\": upload_speed,\n\"ping\": ping_speed,\n}\n</code></pre> <p>This method uses the selenium library to interact with the web browser and perform a speed test using the https://www.speedtest.net/ service. It returns a dictionary containing the results of the speed test, including the download speed, upload speed and ping.</p>"},{"location":"explain.html#run_speedtestself-dict","title":"run_speedtest(self) -&gt; dict","text":"<pre><code>total_iterations = 50\nspinner_frames = [\"\u280b\", \"\u2819\", \"\u2839\", \"\u2838\", \"\u283c\", \"\u2834\", \"\u2826\", \"\u2827\", \"\u2807\", \"\u280f\"]\ntry:\nwith Halo(\nspinner={\"interval\": 100, \"frames\": spinner_frames},\ntext=\"Starting the Speedtest\",\ncolor=\"red\",\ntext_color=\"yellow\",\n).start() as spinner:\ntime.sleep(1)\nfor _ in range(total_iterations):\nspinner.text = \"Progression...\"\nspeedtest = self.get_speedtest()\nspinner.stop_and_persist(\ntext=\"Speedtest completed\", symbol=\"\u2705\".encode(\"utf-8\")\n)\nreturn speedtest\nexcept (KeyboardInterrupt, SystemExit):\nspinner.stop_and_persist(\ntext=\"Speedtest cancelled\", symbol=\"\u274c\".encode(\"utf-8\")\n)\nreturn {\n\"download\": \"N/A\",\n\"upload\": \"N/A\",\n\"ping\": \"N/A\",\n}\n</code></pre> <p>This method uses the get_speedtest() method to perform a speed test and display a progress bar to indicate the progress of the test. It returns a dictionary containing the results of the speed test.</p>"},{"location":"explain.html#_extracted_from_get_speedtestself-object","title":"_extracted_from_get_speedtest(self) -&gt; object","text":"<pre><code>result = self._extracted_from_speedtest()\ntry:\nrgpd = result.find_element(By.ID, \"onetrust-accept-btn-handler\")\nrgpd.click()\nreturn result\nexcept NoSuchElementException:\nreturn result\n</code></pre> <p>This method is a private method that initializes a web browser using Selenium and loads the Speedtest site https://www.speedtest.net/.</p>"},{"location":"explain.html#_extracted_from_speedtestself-object","title":"_extracted_from_speedtest(self) -&gt; object","text":"<pre><code>result = self.get_webdriver(self.define_brower())\nresult.get(\"https://www.speedtest.net/\")\ntime.sleep(5)\nreturn result\n</code></pre> <p>This method is a private method that uses the selenium library to interact with the web browser and perform a speed test using the https://www.speedtest.net/ service. It returns a WebElement object containing the results of the speed test.</p>"},{"location":"explain.html#other-function","title":"Other function","text":""},{"location":"explain.html#main-none","title":"main() -&gt; None","text":"<pre><code>try:\nconsole = Console()\nspeedtest = Yspeed()\nconsole.print(\"Welcome to Yspeed!\", style=\"bold yellow\", justify=\"center\")\nauthor()\nconsole.print(\n\"\\n\\nGathering network information...\",\nstyle=\"bold yellow\",\njustify=\"center\",\n)\nwith Progress(\nTextColumn(\"{task.fields[title]}\"),\nBarColumn(),\nTimeElapsedColumnWithLabel(),\nconsole=console,\n) as progress:\ninfo = gather_network_info(speedtest, progress)\nprint_network_info(console, info)\nexcept (KeyboardInterrupt, SystemExit):\nclear_screen()\nconsole.print(\"Cancel...\", style=\"bold red\", justify=\"center\")\nconsole.print(\"Goodbye!\", style=\"bold red\", justify=\"center\")\nsys.exit(0)\n</code></pre> <p>This function is the main function that is called when the script is run as a standalone program. It creates an instance of the Yspeed class and calls the run() method to perform the speed test.</p>"},{"location":"explain.html#gather_network_infoself-speedtest-progress_bar-dict","title":"gather_network_info(self, speedtest, progress_bar) -&gt; dict","text":"<pre><code>with progress:\ntask1 = progress.add_task(\n\"Getting IP info...\", title=\"[cyan]Getting IP info...\", total=1\n)\ninfo = speedtest.get_ip_info()\nprogress.update(task1, advance=1)\ntask2 = progress.add_task(\n\"Selecting best server...\", title=\"[cyan]Selecting best server...\", total=1\n)\nbest = speedtest.best_server()\nprogress.update(task2, advance=1)\ntask3 = progress.add_task(\n\"Performing speedtest...\", title=\"[cyan]Performing speedtest...\", total=1\n)\nspeed = speedtest.get_speedtest()\nprogress.update(task3, advance=1)\nreturn {\n**info,\n**best,\n**speed,\n}\n</code></pre> <p>This method uses the get_ip_info(), best_server() and get_speedtest() methods to retrieve information about the user's network and perform a speed test. It also uses a progress bar to display the progress of the test. It returns a dictionary containing all the information retrieved.</p>"},{"location":"explain.html#clear_screen-none","title":"clear_screen() -&gt; None","text":"<pre><code>system_name = platform.system()\nif system_name == \"Windows\":\n# do something specific for Windows\nos.system(\"cls\")\nelif system_name == \"Linux\":\n# do something specific for Linux\nos.system(\"clear\")\nelse:\nprint(f\"Unable to clear the terminal because your system is not supported by the program. ({system_name})\")\n</code></pre> <p>This method clears the terminal screen depending on the operating system. It uses the os library to call the appropriate system command to clear the screen.</p>"},{"location":"test.html","title":"Test","text":""},{"location":"test.html#unit-tests-for-yspeed","title":"Unit tests for Yspeed","text":"<pre><code>@contextmanager\ndef progress_context_manager():\n\"\"\"\n    Context manager for the progress bar\n    \"\"\"\nprogress_mock = MagicMock()\nprogress_mock.__enter__.return_value = progress_mock\nyield progress_mock\nprogress_mock.__exit__.assert_called_once()\nclass TestYourClass(unittest.TestCase):\n@patch('yspeed.Halo')\n@patch('yspeed.time.sleep', MagicMock(return_value=None))\ndef test_run_speedtest(self, mock_halo):\n\"\"\" Test the run_speedtest method\"\"\"\n# Replace 'YourClass' with the actual name of the class containing the `run_speedtest` function\nspeedtest_obj = Yspeed()\n# Mock the get_speedtest method to return a predefined dictionary\nmock_speedtest = {'download': '100 Mbps', 'upload': '50 Mbps', 'ping': '20 ms'}\nspeedtest_obj.get_speedtest = MagicMock(return_value=mock_speedtest)\n# Call the run_speedtest function and get the results\nresult = speedtest_obj.run_speedtest()\n# Assert that the result is as expected\nself.assertEqual(result, mock_speedtest)\n# Assert that the Halo spinner is called with the expected parameters\nmock_halo.assert_called_with(spinner={'interval': 100, 'frames': ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f']}, text=\"D\u00e9marrage du Speedtest\", color=\"red\", text_color=\"yellow\")\ndef setUp(self):\n\"\"\" \n        Setup the test class\n        \"\"\"\nself.yspeed = Yspeed()\ndef test_get_ip_info(self):\n\"\"\"\n        Test the get_ip_info method\n        \"\"\"\nwith patch('requests.get') as mock_get:\nmock_get.return_value.json.return_value = {\n'ip': '1.2.3.4',\n'city': 'Test City',\n'region': 'Test Region',\n'country': 'Test Country',\n'org': 'Test Operator'\n}\nresult = self.yspeed.get_ip_info()\nself.assertIsInstance(result, dict)\nself.assertEqual(result[\"ip\"], \"1.2.3.4\")\nself.assertEqual(result[\"city\"], \"Test City\")\nself.assertEqual(result[\"region\"], \"Test Region\")\nself.assertEqual(result[\"country\"], \"Test Country\")\nself.assertEqual(result[\"operator\"], \"Test Operator\")\ndef test_gather_network_info(self):\n\"\"\"\n        Test the gather_network_info method\n        \"\"\"\n# Mock Yspeed to return test data\nspeedtest_mock = Mock()\nspeedtest_mock.get_ip_info.return_value = {\"ip\": \"1.2.3.4\"}\nspeedtest_mock.best_serveur.return_value = {\"Serveur\": \"Test Server\"}\nspeedtest_mock.get_speedtest.return_value = {\"download\": \"100 Mbps\"}\nwith progress_context_manager() as progress_mock:\nresult = gather_network_info(speedtest_mock, progress_mock)\nself.assertIn(\"ip\", result)\nself.assertIn(\"Serveur\", result)\nself.assertIn(\"download\", result)\ndef test_print_network_info(self):\n\"\"\"\n        Test the print_network_info method\n        \"\"\"\n# Mock Console to capture printed output\nconsole_mock = Mock()\ninfo = {\n\"operator\": \"Test Operator\",\n\"ip\": \"1.2.3.4\",\n\"city\": \"Test City\",\n\"region\": \"Test Region\",\n\"country\": \"Test Country\",\n\"fournisseur\": \"Test Fournisseur\",\n\"Serveur\": \"Test Server\",\n\"download\": \"100 Mbps\",\n\"upload\": \"50 Mbps\",\n\"ping\": \"10 ms\"\n}\nprint_network_info(console_mock, info)\nconsole_mock.print.assert_any_call(\"Operator: [bold green]Test Operator[/bold green]\", style=\"blue\", justify=\"center\")\nconsole_mock.print.assert_any_call(\"IP: [bold green]1.2.3.4[/bold green]\", style=\"blue\", justify=\"center\")\nconsole_mock.print.assert_any_call(\"Server: [bold green]Test Server[/bold green]\", style=\"blue\", justify=\"center\")\nconsole_mock.print.assert_any_call(\"Download: [bold green]100 Mbps[/bold green]\", style=\"blue\", justify=\"center\")\nconsole_mock.print.assert_any_call(\"Upload: [bold green]50 Mbps[/bold green]\", style=\"blue\", justify=\"center\")\nconsole_mock.print.assert_any_call(\"Ping: [bold green]10 ms[/bold green]\", style=\"blue\", justify=\"center\")\nconsole_mock.print.assert_any_call(\"City: [bold green]Test City[/bold green]\", style=\"blue\", justify=\"center\")\nconsole_mock.print.assert_any_call(\"Region: [bold green]Test Region[/bold green]\", style=\"blue\", justify=\"center\")\nconsole_mock.print.assert_any_call(\"Country: [bold green]Test Country[/bold green]\", style=\"blue\", justify=\"center\")\nconsole_mock.print.assert_any_call(\"Fournisseur: [bold green]Test Fournisseur[/bold green]\", style=\"blue\", justify=\"center\")\n</code></pre> <p>The purpose of this test file is to test the various features of the Python library \"yspeed\". It uses the Python module \"unittest\" to perform the tests.</p> <p>The file also imports other libraries such as \"mock\" and \"patch\" to simulate the inputs and outputs of certain functions and \"contextmanager\" to manage contexts.</p> <p>The \"TestYourClass\" class inherits from \"unittest.TestCase\" and defines different tests for the \"yspeed\" functions. Each test method will start with \"test_\" and check the expected behaviour of a specific function using assertions.</p> <p>The \"setUp\" method is executed before each test and allows the objects needed for the tests to be set up.</p> <p>The test methods include \"test_run_speedtest\", \"test_get_ip_info\", \"test_gather_network_info\" and \"test_print_network_info\", which test the \"run_speedtest\", \"get_ip_info\", \"gather_network_info\" and \"print_network_info\" function respectively.</p> <p>Finally, when this file is run as a main script, the \"unittest.main()\" method is called to run the tests. The results of the tests are displayed on the screen, indicating whether the tests passed or failed.</p>"}]}